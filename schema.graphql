# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Admin {
  id: ID!
  name: String
  email: String
  password: PasswordState
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input AdminWhereUniqueInput {
  id: ID
  email: String
}

input AdminWhereInput {
  AND: [AdminWhereInput!]
  OR: [AdminWhereInput!]
  NOT: [AdminWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  posts: PostManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input AdminOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input AdminUpdateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForUpdateInput
  createdAt: DateTime
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input AdminUpdateArgs {
  where: AdminWhereUniqueInput!
  data: AdminUpdateInput!
}

input AdminCreateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForCreateInput
  createdAt: DateTime
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  content: Post_content_Document
  author: Admin
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  author: AdminWhereInput
  tags: TagManyRelationFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input PostUpdateInput {
  title: String
  content: JSON
  author: AdminRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input AdminRelateToOneForUpdateInput {
  create: AdminCreateInput
  connect: AdminWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  content: JSON
  author: AdminRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input AdminRelateToOneForCreateInput {
  create: AdminCreateInput
  connect: AdminWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

type Event {
  id: ID!
  name: String
  description: String
  venue: String
  date: CalendarDay
  ticket(where: TicketWhereInput! = {}, orderBy: [TicketOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TicketWhereUniqueInput): [Ticket!]
  ticketCount(where: TicketWhereInput! = {}): Int
}

scalar CalendarDay @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input EventWhereUniqueInput {
  id: ID
  name: String
}

input EventWhereInput {
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  venue: StringFilter
  date: CalendarDayFilter
  ticket: TicketManyRelationFilter
}

input CalendarDayFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayFilter
}

input TicketManyRelationFilter {
  every: TicketWhereInput
  some: TicketWhereInput
  none: TicketWhereInput
}

input EventOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  venue: OrderDirection
  date: OrderDirection
}

input EventUpdateInput {
  name: String
  description: String
  venue: String
  date: CalendarDay
  ticket: TicketRelateToManyForUpdateInput
}

input TicketRelateToManyForUpdateInput {
  disconnect: [TicketWhereUniqueInput!]
  set: [TicketWhereUniqueInput!]
  create: [TicketCreateInput!]
  connect: [TicketWhereUniqueInput!]
}

input EventUpdateArgs {
  where: EventWhereUniqueInput!
  data: EventUpdateInput!
}

input EventCreateInput {
  name: String
  description: String
  venue: String
  date: CalendarDay
  ticket: TicketRelateToManyForCreateInput
}

input TicketRelateToManyForCreateInput {
  create: [TicketCreateInput!]
  connect: [TicketWhereUniqueInput!]
}

type Ticket {
  id: ID!
  owner: User
  event: Event
}

input TicketWhereUniqueInput {
  id: ID
}

input TicketWhereInput {
  AND: [TicketWhereInput!]
  OR: [TicketWhereInput!]
  NOT: [TicketWhereInput!]
  id: IDFilter
  owner: UserWhereInput
  event: EventWhereInput
}

input TicketOrderByInput {
  id: OrderDirection
}

input TicketUpdateInput {
  owner: UserRelateToOneForUpdateInput
  event: EventRelateToOneForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input EventRelateToOneForUpdateInput {
  create: EventCreateInput
  connect: EventWhereUniqueInput
  disconnect: Boolean
}

input TicketUpdateArgs {
  where: TicketWhereUniqueInput!
  data: TicketUpdateInput!
}

input TicketCreateInput {
  owner: UserRelateToOneForCreateInput
  event: EventRelateToOneForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input EventRelateToOneForCreateInput {
  create: EventCreateInput
  connect: EventWhereUniqueInput
}

type User {
  id: ID!
  name: String
  telegramUsername: String
  telegramId: String
  submitedName: String
  email: String
  ticket(where: TicketWhereInput! = {}, orderBy: [TicketOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TicketWhereUniqueInput): [Ticket!]
  ticketCount(where: TicketWhereInput! = {}): Int
}

input UserWhereUniqueInput {
  id: ID
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  telegramUsername: StringFilter
  telegramId: StringFilter
  submitedName: StringFilter
  email: StringFilter
  ticket: TicketManyRelationFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  telegramUsername: OrderDirection
  telegramId: OrderDirection
  submitedName: OrderDirection
  email: OrderDirection
}

input UserUpdateInput {
  name: String
  telegramUsername: String
  telegramId: String
  submitedName: String
  email: String
  ticket: TicketRelateToManyForUpdateInput
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  telegramUsername: String
  telegramId: String
  submitedName: String
  email: String
  ticket: TicketRelateToManyForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createAdmin(data: AdminCreateInput!): Admin
  createAdmins(data: [AdminCreateInput!]!): [Admin]
  updateAdmin(where: AdminWhereUniqueInput!, data: AdminUpdateInput!): Admin
  updateAdmins(data: [AdminUpdateArgs!]!): [Admin]
  deleteAdmin(where: AdminWhereUniqueInput!): Admin
  deleteAdmins(where: [AdminWhereUniqueInput!]!): [Admin]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createEvent(data: EventCreateInput!): Event
  createEvents(data: [EventCreateInput!]!): [Event]
  updateEvent(where: EventWhereUniqueInput!, data: EventUpdateInput!): Event
  updateEvents(data: [EventUpdateArgs!]!): [Event]
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteEvents(where: [EventWhereUniqueInput!]!): [Event]
  createTicket(data: TicketCreateInput!): Ticket
  createTickets(data: [TicketCreateInput!]!): [Ticket]
  updateTicket(where: TicketWhereUniqueInput!, data: TicketUpdateInput!): Ticket
  updateTickets(data: [TicketUpdateArgs!]!): [Ticket]
  deleteTicket(where: TicketWhereUniqueInput!): Ticket
  deleteTickets(where: [TicketWhereUniqueInput!]!): [Ticket]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  endSession: Boolean!
  authenticateAdminWithPassword(email: String!, password: String!): AdminAuthenticationWithPasswordResult
  createInitialAdmin(data: CreateInitialAdminInput!): AdminAuthenticationWithPasswordSuccess!
}

union AdminAuthenticationWithPasswordResult = AdminAuthenticationWithPasswordSuccess | AdminAuthenticationWithPasswordFailure

type AdminAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: Admin!
}

type AdminAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialAdminInput {
  name: String
  email: String
  password: String
}

type Query {
  admins(where: AdminWhereInput! = {}, orderBy: [AdminOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AdminWhereUniqueInput): [Admin!]
  admin(where: AdminWhereUniqueInput!): Admin
  adminsCount(where: AdminWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  event(where: EventWhereUniqueInput!): Event
  eventsCount(where: EventWhereInput! = {}): Int
  tickets(where: TicketWhereInput! = {}, orderBy: [TicketOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TicketWhereUniqueInput): [Ticket!]
  ticket(where: TicketWhereUniqueInput!): Ticket
  ticketsCount(where: TicketWhereInput! = {}): Int
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = Admin

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
